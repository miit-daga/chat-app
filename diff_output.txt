diff --git a/client/package-lock.json b/client/package-lock.json
index 2e66f9e..a68ec4f 100644
--- a/client/package-lock.json
+++ b/client/package-lock.json
@@ -12,7 +12,7 @@
         "@chakra-ui/react": "^2.8.2",
         "@emotion/react": "^11.13.0",
         "@emotion/styled": "^11.13.0",
-        "axios": "^1.7.2",
+        "axios": "^1.7.3",
         "formik": "^2.4.6",
         "framer-motion": "^11.3.19",
         "prettier": "^3.3.3",
@@ -3150,9 +3150,9 @@
       }
     },
     "node_modules/axios": {
-      "version": "1.7.2",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.2.tgz",
-      "integrity": "sha512-2A8QhOMrbomlDuiLeK9XibIBzuHeRcqqNOHp0Cyp5EoJ1IFDh+XZH3A6BkXtv0K4gFGCI0Y4BM7B1wOEi0Rmgw==",
+      "version": "1.7.3",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.3.tgz",
+      "integrity": "sha512-Ar7ND9pU99eJ9GpoGQKhKf58GpUOgnzuaB7ueNQ5BMi0p+LZ5oaEnfF999fAArcTIBwXTCHAmGcHOZJaWPq9Nw==",
       "license": "MIT",
       "dependencies": {
         "follow-redirects": "^1.15.6",
diff --git a/client/package.json b/client/package.json
index 6fceb16..7fe636b 100644
--- a/client/package.json
+++ b/client/package.json
@@ -14,7 +14,7 @@
     "@chakra-ui/react": "^2.8.2",
     "@emotion/react": "^11.13.0",
     "@emotion/styled": "^11.13.0",
-    "axios": "^1.7.2",
+    "axios": "^1.7.3",
     "formik": "^2.4.6",
     "framer-motion": "^11.3.19",
     "prettier": "^3.3.3",
diff --git a/client/src/components/Home/AddFriendModal.jsx b/client/src/components/Home/AddFriendModal.jsx
index 19c535e..51125c3 100644
--- a/client/src/components/Home/AddFriendModal.jsx
+++ b/client/src/components/Home/AddFriendModal.jsx
@@ -1,5 +1,6 @@
 import {
   Button,
+  Heading,
   Modal,
   ModalBody,
   ModalCloseButton,
@@ -8,10 +9,12 @@ import {
   ModalHeader,
   ModalOverlay,
 } from "@chakra-ui/react";
-import React from "react";
+import React, { useContext } from "react";
 import TextField from "../TextField.jsx";
 import { Form, Formik } from "formik";
 import * as yup from "yup";
+import socket from "../../socket.js";
+import { FriendContext } from "./Home.jsx";
 
 const friendSchema = yup.object({
   friendName: yup
@@ -22,8 +25,14 @@ const friendSchema = yup.object({
 });
 
 const AddFriendModal = ({ isOpen, onClose }) => {
+  const [error, setError] = React.useState("");
+  const handleClose = () => {
+    setError("");
+    onClose();
+  };
+  const { setFriendList } = useContext(FriendContext);
   return (
-    <Modal isOpen={isOpen} onClose={onClose} isCentered>
+    <Modal isOpen={isOpen} onClose={handleClose} isCentered>
       <ModalOverlay />
       <ModalContent>
         <ModalHeader>Add a friend</ModalHeader>
@@ -31,16 +40,31 @@ const AddFriendModal = ({ isOpen, onClose }) => {
         <Formik
           initialValues={{ friendName: "" }}
           onSubmit={(values, actions) => {
-            onClose();
-            alert(JSON.stringify(values, null, 2));
-            actions.resetForm();
+            socket.emit(
+              "add_friend",
+              values.friendName,
+              ({ errorMsg, done, newFriend }) => {
+                if (done) {
+                  setFriendList((prevFriendList) => [
+                    newFriend,
+                    ...prevFriendList,
+                  ]);
+                  handleClose();
+                  return;
+                }
+                setError(errorMsg);
+              },
+            );
           }}
           validationSchema={friendSchema}
         >
           <Form>
             <ModalBody>
+              <Heading as="p" color="red.500" textAlign="center" fontSize="xl">
+                {error}
+              </Heading>
               <TextField
-                label="Friend name"
+                label="Friend's name"
                 placeholder="Enter friend's username."
                 autoComplete="off"
                 name="friendName"
diff --git a/client/src/components/Home/Chat.jsx b/client/src/components/Home/Chat.jsx
index 6800b34..82639b5 100644
--- a/client/src/components/Home/Chat.jsx
+++ b/client/src/components/Home/Chat.jsx
@@ -1,15 +1,53 @@
-import { TabPanel, TabPanels, VStack } from "@chakra-ui/react";
-import React, { useContext } from "react";
-import { FriendContext } from "./Home.jsx";
+import { TabPanel, TabPanels, Text, VStack } from "@chakra-ui/react";
+import React, { useContext, useEffect, useRef } from "react";
+import { FriendContext, MessagesContext } from "./Home.jsx";
+import ChatBox from "./ChatBox.jsx";
 
-const Chat = () => {
+const Chat = ({ user }) => {
   const { friendList } = useContext(FriendContext);
+  const { messages } = useContext(MessagesContext);
+  const bottomDiv = useRef(null);
+
+  useEffect(() => {
+    bottomDiv.current?.scrollIntoView({ behavior: "smooth" });
+  });
   return friendList.length > 0 ? (
-    <VStack>
-      <TabPanels>
-        <TabPanel>Friend one</TabPanel>
-        <TabPanel>Friend two</TabPanel>
+    <VStack h="100%" justify="end">
+      <TabPanels overflowY="scroll">
+        {friendList.map((friend) => (
+          <VStack
+            flexDir="column-reverse"
+            as={TabPanel}
+            key={`chat:${friend.username}`}
+            w="100%"
+          >
+            <div ref={bottomDiv} />
+            {messages
+              .filter(
+                (msg) => msg.to === friend.user || msg.from === friend.user,
+              )
+              .map((message, idx) => (
+                <Text
+                  m={
+                    message.to === friend.user
+                      ? "1rem 0 0 auto !important"
+                      : "1rem auto 0 0 !important"
+                  }
+                  maxWidth="50%"
+                  key={`msg=${friend.username}.${idx}`}
+                  fontSize="lg"
+                  bg={message.to === friend.user ? "blue.100" : "gray.100"}
+                  borderRadius="10px"
+                  p="0.5rem 1rem"
+                  color="gray.800"
+                >
+                  {message.content}
+                </Text>
+              ))}
+          </VStack>
+        ))}
       </TabPanels>
+      <ChatBox user={user} />
     </VStack>
   ) : (
     <VStack
diff --git a/client/src/components/Home/Home.jsx b/client/src/components/Home/Home.jsx
index cdfb6b2..c7572d8 100644
--- a/client/src/components/Home/Home.jsx
+++ b/client/src/components/Home/Home.jsx
@@ -1,22 +1,34 @@
 import { Grid, GridItem, Tabs } from "@chakra-ui/react";
-import React, { createContext } from "react";
+import React, { createContext, useContext } from "react";
 import Sidebar from "./Sidebar.jsx";
 import Chat from "./Chat.jsx";
 import useSocketSetup from "./useSocketSetup.jsx";
 
 export const FriendContext = createContext();
+export const MessagesContext = createContext();
 
 const Home = () => {
   const [friendList, setFriendList] = React.useState([]);
-  useSocketSetup();
+  const [messages, setMessages] = React.useState([]);
+  const [friendIndex, setFriendIndex] = React.useState(0);
+  useSocketSetup(setFriendList, setMessages);
   return (
     <FriendContext.Provider value={{ friendList, setFriendList }}>
-      <Grid templateColumns="repeat(10,1fr)" h="100vh" as={Tabs}>
+      <Grid
+        templateColumns="repeat(10,1fr)"
+        h="100vh"
+        as={Tabs}
+        onChange={(index) => {    //chakra UI tab feature that gives the index of the tab clicked
+          setFriendIndex(index); 
+        }}
+      >
         <GridItem colSpan="2" borderRight="1px solid gray">
           <Sidebar></Sidebar>
         </GridItem>
-        <GridItem colSpan="8">
-          <Chat></Chat>
+        <GridItem colSpan="8" maxHeight="100vh">
+          <MessagesContext.Provider value={{ messages, setMessages }}>
+            <Chat user={friendList[friendIndex]?.user} />
+          </MessagesContext.Provider>
         </GridItem>
       </Grid>
     </FriendContext.Provider>
diff --git a/client/src/components/Home/Sidebar.jsx b/client/src/components/Home/Sidebar.jsx
index 514b605..f518e09 100644
--- a/client/src/components/Home/Sidebar.jsx
+++ b/client/src/components/Home/Sidebar.jsx
@@ -30,17 +30,8 @@ const Sidebar = () => {
         </HStack>
         <Divider />
         <VStack as={TabList}>
-          {/* <HStack as={Tab}>
-          <Circle bg="red.500" w="10px" h="10px" />
-          <Text>John Smith</Text>
-        </HStack>
-        <HStack as={Tab}>
-          <Circle bg="green.400" w="10px" h="10px" />
-          <Text>John Smith</Text>
-        </HStack> */}
           {friendList.map((friend) => (
-            // eslint-disable-next-line react/jsx-key
-            <HStack as={Tab}>
+            <HStack as={Tab} key={`friend:${friend.username}`}>
               <Circle
                 bg={friend.connected ? "green.400" : "red.500"}
                 w="10px"
diff --git a/client/src/components/Home/useSocketSetup.jsx b/client/src/components/Home/useSocketSetup.jsx
index 08b2243..ba6e7ab 100644
--- a/client/src/components/Home/useSocketSetup.jsx
+++ b/client/src/components/Home/useSocketSetup.jsx
@@ -2,17 +2,60 @@ import { useContext, useEffect } from "react";
 import socket from "../../socket.js";
 import { AccountContext } from "../AccountContext.jsx";
 
-const useSocketSetup = () => {
+const useSocketSetup = (setFriendList, setMessages) => {
   const { setUser } = useContext(AccountContext);
+
   useEffect(() => {
-    socket.connect();
-    socket.on("connect error", () => {
+    // Only connect once
+    if (!socket.connected) {
+      socket.connect();
+    }
+
+    const handleFriends = (friendList) => {
+      setFriendList(friendList);
+    };
+
+    const handleMessages = (messages) => {
+      setMessages(messages);
+    };
+
+    const handleDM = (message) => {
+      setMessages((prevMessages) => [message, ...prevMessages]);
+    };
+
+    const handleConnected = (status, username) => {
+      setFriendList((prevFriends) =>
+        prevFriends.map((friend) => {
+          if (friend.username === username) {
+            return { ...friend, connected: status };
+          }
+          return friend;
+        }),
+      );
+    };
+
+    const handleConnectError = () => {
       setUser({ loggedIn: false });
-    });
+    };
+
+    // Set up socket event listeners
+    socket.on("friends", handleFriends);
+    socket.on("messages", handleMessages);
+    socket.on("dm", handleDM);
+    socket.on("connected", handleConnected);
+    socket.on("connect_error", handleConnectError);
+
+    // Cleanup function to remove event listeners
     return () => {
-      socket.off("connect_error");
+      socket.off("friends", handleFriends);
+      socket.off("messages", handleMessages);
+      socket.off("dm", handleDM);
+      socket.off("connected", handleConnected);
+      socket.off("connect_error", handleConnectError);
     };
-  }, [setUser]);
+  }, [setUser, setFriendList, setMessages]);
+ 
+  // Ensure cleanup on unmount
 };
 
 export default useSocketSetup;
diff --git a/client/src/components/Login/Login.jsx b/client/src/components/Login/Login.jsx
index 6657523..c2a9f33 100644
--- a/client/src/components/Login/Login.jsx
+++ b/client/src/components/Login/Login.jsx
@@ -46,7 +46,7 @@ const Login = () => {
               }
             })
             .catch((err) => {
-              console.error("Request failed:", err);
+              console.log("Request failed:", err);
               setError(
                 err.response?.data?.errorMessage ||
                   "An error occurred during login",
diff --git a/server/controllers/authController.js b/server/controllers/authController.js
index f980f42..0be03b2 100644
--- a/server/controllers/authController.js
+++ b/server/controllers/authController.js
@@ -1,6 +1,7 @@
 const pool = require('../db.js');
 const bcrypt = require('bcrypt');
 const { v4: uuidv4 } = require('uuid');
+const redisClient = require('../redis.js'); // Adjust the path as necessary
 
 module.exports.getLogin = (req, res) => {
     if (req.session.user && req.session.user.username) {
@@ -21,7 +22,7 @@ module.exports.postLogin = async (req, res) => {
                 id: potentialLogin.rows[0].id,
                 userId: potentialLogin.rows[0].userid
             };
-            return res.json({ loggedIn: true, username: potentialLogin.rows[0].username });
+            return res.json({ loggedIn: true, username: req.session.user.username });
         } else {
             console.log("ERROR!!!!!");
             return res.json({ loggedIn: false, errorMessage: "Wrong username or password" });
@@ -43,7 +44,7 @@ module.exports.handleRegister = async (req, res) => {
             id: newUserQuery.rows[0].id,
             userId: newUserQuery.rows[0].userid
         };
-        return res.json({ loggedIn: true, username: req.body.username });
+        return res.json({ loggedIn: true, username: req.session.user.username });
     } else {
         console.log("ERROR!!!!!");
         return res.json({ loggedIn: false, errorMessage: "Username taken" });
diff --git a/server/controllers/serverController.js b/server/controllers/serverController.js
index 5be25fa..4aec088 100644
--- a/server/controllers/serverController.js
+++ b/server/controllers/serverController.js
@@ -19,7 +19,7 @@ const sessionMiddleware = session({
 });
 
 const wrap = (expressMiddleware) => {
-   return (socket, next) => expressMiddleware(socket.request, {}, next)
+    return (socket, next) => expressMiddleware(socket.request, {}, next)
 }
 
 const corsConfig = {
diff --git a/server/controllers/socketController.js b/server/controllers/socketController.js
index 029ab47..74f3298 100644
--- a/server/controllers/socketController.js
+++ b/server/controllers/socketController.js
@@ -5,7 +5,80 @@ module.exports.authorizeUser = (socket, next) => {
         console.log("Bad request!");
         return next(new Error("Unauthorized"));
     }
+    next()
+}
+module.exports.initializeUser = async socket => {
     socket.user = { ...socket.request.session.user };
-    redisClient.hset(`user:${socket.user.username}`, "userId", socket.user.userId);
-    next();
-}
\ No newline at end of file
+    socket.join(socket.user.userId);
+    redisClient.hset(
+        `user:${socket.user.username}`,
+        "userId",
+        socket.user.userId,
+        "connected",
+        true);
+    const friendList = await redisClient.lrange(`friends:${socket.user.username}`, 0, -1);
+    const parsedFriendList = await parseFriendList(friendList);
+    const friendRooms = parsedFriendList.map(friend => friend.user);
+    if (friendRooms.length > 0)
+        socket.to(friendRooms).emit("connected", true, socket.user.username)
+    socket.emit("friends", parsedFriendList)
+    const msgQuery = await redisClient.lrange(`chat:${socket.user.userId}`, 0, -1);
+    const messages = msgQuery.map(msgStr => {
+        const parsedStr = msgStr.split(".");
+        return { to: parsedStr[0], from: parsedStr[1], content: parsedStr[2] }
+    });
+    if (messages && messages.length > 0)
+        socket.emit("messages", messages)
+}
+
+module.exports.addFriend = async (socket, friendName, cb) => {
+    console.log(friendName);
+    if (friendName === socket.user.username) {
+        cb({ done: false, errorMsg: "Cannot add self as friend!" }); return;
+    }
+    const friend = await redisClient.hgetall(`user:${friendName}`)
+    console.log(friend);
+    const currentFriendList = await redisClient.lrange(`friends:${socket.user.username}`, 0, -1)
+    console.log(currentFriendList);
+    if (Object.keys(friend).length === 0) {
+        cb({ done: false, errorMsg: "Username not valid" }); return;
+    }
+    if (currentFriendList && currentFriendList.indexOf(`${friendName}.${friend.userId}`) !== -1) {
+        cb({ done: false, errorMsg: "Friend already added!" }); return;
+    }
+    await redisClient.lpush(`friends:${socket.user.username}`, [friendName, friend.userId].join("."))
+    const newFriend = { username: friendName, user: friend.userId, connected: friend.connected }
+    cb({ done: true, newFriend });
+    return;
+}
+
+module.exports.onDisconnect = async (socket) => {
+    await redisClient.hset(`user:${socket.user.username}`, "connected", false);
+    const friendList = await redisClient.lrange(`friends:${socket.user.username}`, 0, -1);
+    const friendRooms = await parseFriendList(friendList).then(friends => friends.map(friend => friend.user));
+    socket.to(friendRooms).emit("connected", false, socket.user.username);
+}
+
+const parseFriendList = async (friendList) => {
+    const newFriendList = [];
+    for (let friend of friendList) {
+        const parsedFriend = friend.split(".");
+        const friendConnected = await redisClient.hget(`user:${parsedFriend[0]}`, "connected");
+        newFriendList.push({
+            username: parsedFriend[0],
+            user: parsedFriend[1],
+            connected: friendConnected === "true"
+        });
+    }
+    return newFriendList;
+};
+
+module.exports.dm = async (socket, message) => {
+    message.from = socket.user.userId;
+    //to.from.content
+    const messageString = [message.to, message.from, message.content].join(".");
+    console.log("Message string:", messageString);
+    await redisClient.lpush(`chat:${message.to}`, messageString); // Removed extra quotes
+    await redisClient.lpush(`chat:${message.from}`, messageString); // Removed extra quotes
+    socket.to(message.to).emit("dm", message);
+};
diff --git a/server/index.js b/server/index.js
index 676d034..f3d47e9 100644
--- a/server/index.js
+++ b/server/index.js
@@ -1,14 +1,15 @@
 const express = require('express');
 const { Server } = require('socket.io');
 const app = express();
-const server = require('http').createServer(app);
+const httpserver = require('http').createServer(app);
 const helmet = require('helmet');
 const cors = require('cors');
 const authRouter = require('./routes/authRoutes.js');
 const { sessionMiddleware, wrap, corsConfig } = require('./controllers/serverController.js');
-const { authorizeUser } = require('./controllers/socketController.js');
+const { authorizeUser, initializeUser, addFriend, onDisconnect, dm } = require('./controllers/socketController.js');
 
-const io = new Server(server, {
+
+const io = new Server(httpserver, {
     cors: corsConfig
 })
 app.use(helmet());
@@ -24,10 +25,13 @@ io.use(wrap(sessionMiddleware));
 io.use(authorizeUser)
 io.on('connect', (socket) => {
     // console.log(socket.request.session.user.username);
-    console.log(socket.id);
-    console.log("UserId:", socket.user.userId);
+    initializeUser(socket)
+    socket.on("add_friend", (friendName, cb) => {
+        addFriend(socket, friendName, cb)
+    })
+    socket.on("dm",(message)=>dm(socket,message))
+    socket.on('disconnect', () => onDisconnect(socket))
 });
-
-server.listen(3000, () => {
+httpserver.listen(3000, () => {
     console.log('Server is running on port 3000');
 })
\ No newline at end of file
diff --git a/server/routes/authRoutes.js b/server/routes/authRoutes.js
index a060297..10fa083 100644
--- a/server/routes/authRoutes.js
+++ b/server/routes/authRoutes.js
@@ -1,7 +1,7 @@
 const express = require('express');
 const { validateForm } = require('../controllers/validateForm.js');
 const router = express.Router();
-const { getLogin, postLogin, handleRegister } = require('../controllers/authController.js');
+const { getLogin, postLogin, handleRegister, logout } = require('../controllers/authController.js');
 const { rateLimiter } = require('../controllers/rateLimiter.js');
 
 router.get('/login', getLogin);
@@ -9,5 +9,4 @@ router.get('/login', getLogin);
 router.post('/login', validateForm, rateLimiter(60, 10), postLogin);
 
 router.post('/register', validateForm, rateLimiter(60, 3), handleRegister);
-
 module.exports = router;
